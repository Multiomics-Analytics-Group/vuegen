---
title: Basic Example Vuegen Demo Notebook
fig-align: center
execute:
  echo: false
  output: asis
jupyter: python3
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    page-layout: full
    self-contained: true
include-in-header:
    text: |
        <style type="text/css">
        .footer {
        position: relative;
        left: 0;
        width: 100%;
        text-align: center;
        margin-top: 20px;
        }
        </style>
include-after-body:
    text: |
        <footer class="footer">
            This report was generated with
            <a href="https://github.com/Multiomics-Analytics-Group/vuegen" target="_blank">
                <img src="https://raw.githubusercontent.com/Multiomics-Analytics-Group/vuegen/main/docs/images/vuegen_logo.svg" alt="VueGen" width="65px">
            </a>
            | Copyright 2025 <a href="https://github.com/Multiomics-Analytics-Group" target="_blank">Multiomics Network Analytics Group (MoNA)</a>
        </footer>
---

```{python}
#| label: 'Imports'
from itables import show, init_notebook_mode
from pathlib import Path
import IPython.display as display
import altair as alt
import json
import pandas as pd
import plotly.io as pio
import requests


init_notebook_mode(all_interactive=True)
report_dir = Path().cwd()
```

A general description of the report.

# Plots
## Interactive Plots
Optional description for section.


### Top Species Plot By Biome Plotly

```{python}
#| label: 'Top Species Plot By Biome Plotly 1'
#| fig-cap: ""

with open(report_dir /'../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/1_Interactive_plots/1_top_species_plot_by_biome_plotly.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json if key in ['data', 'layout']}

# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'} for entry in plot_json.get('data', [])]

# Convert JSON to string
plot_json_str = json.dumps(plot_json)

# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400, margin=dict(b=50, t=50, l=50, r=50))

fig_plotly.show()
```

### Multiline Plot Altair

```{python}
#| label: 'Multiline Plot Altair 2'
#| fig-cap: ""

with open(report_dir /'../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/1_Interactive_plots/2_multiline_plot_altair.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Convert JSON to string
plot_json_str = json.dumps(plot_json)

# Create the altair plot
fig_altair = alt.Chart.from_json(plot_json_str).properties(width=900, height=370)

fig_altair
```

### Pie Plot Countries Plotly

```{python}
#| label: 'Pie Plot Countries Plotly 3'
#| fig-cap: ""

with open(report_dir /'../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/1_Interactive_plots/3_pie_plot_countries_plotly.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json if key in ['data', 'layout']}

# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'} for entry in plot_json.get('data', [])]

# Convert JSON to string
plot_json_str = json.dumps(plot_json)

# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400, margin=dict(b=50, t=50, l=50, r=50))

fig_plotly.show()
```

### Pie Plots Biomes Plotly

```{python}
#| label: 'Pie Plots Biomes Plotly 4'
#| fig-cap: ""

with open(report_dir /'../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/1_Interactive_plots/4_pie_plots_biomes_plotly.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json if key in ['data', 'layout']}

# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'} for entry in plot_json.get('data', [])]

# Convert JSON to string
plot_json_str = json.dumps(plot_json)

# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400, margin=dict(b=50, t=50, l=50, r=50))

fig_plotly.show()
```

### Saline Metagenomics Samples Map Altair

```{python}
#| label: 'Saline Metagenomics Samples Map Altair 5'
#| fig-cap: ""

with open(report_dir /'../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/1_Interactive_plots/5_saline_metagenomics_samples_map_altair.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Convert JSON to string
plot_json_str = json.dumps(plot_json)

# Create the altair plot
fig_altair = alt.Chart.from_json(plot_json_str).properties(width=900, height=370)

fig_altair
```

### Plotly Plot R

```{python}
#| label: 'Plotly Plot R 6'
#| fig-cap: ""

with open(report_dir /'../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/1_Interactive_plots/6_plotly_plot_R.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json if key in ['data', 'layout']}

# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'} for entry in plot_json.get('data', [])]

# Convert JSON to string
plot_json_str = json.dumps(plot_json)

# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400, margin=dict(b=50, t=50, l=50, r=50))

fig_plotly.show()
```

## Static Plots
### Number Samples Per Study
![](../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/2_Static_plots/1_number_samples_per_study.png){fig-alt= width=90%}

### Animal Metagenomics Samples Map
![](../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/2_Static_plots/2_animal_metagenomics_samples_map.png){fig-alt= width=90%}

### Alpha Diversity Host Associated Samples
![](../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/1_Plots/2_Static_plots/3_alpha_diversity_host_associated_samples.png){fig-alt= width=90%}

# Dataframes
## All Formats
### Phyla Correlation Network Csv
```{python}
#| label: 'Phyla Correlation Network Csv 1'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/2_Dataframes/1_All_formats/1_phyla_correlation_network_csv.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Abundance Table Example Xls
```{python}
#| label: 'Abundance Table Example Xls 2'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/2_Dataframes/1_All_formats/2_abundance_table_example_xls.xls')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

#### infos
```{python}
#| label: 'Abundance Table Example Xls 2 infos'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/2_Dataframes/1_All_formats/2_abundance_table_example_xls.xls', sheet_name='infos')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Sample Info Example Txt
```{python}
#| label: 'Sample Info Example Txt 3'
#| fig-cap: ""

df = pd.read_table(report_dir / '../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/2_Dataframes/1_All_formats/3_sample_info_example_txt.txt')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Sample Info Example Parquet
```{python}
#| label: 'Sample Info Example Parquet 4'
#| fig-cap: ""

df = pd.read_parquet(report_dir / '../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/2_Dataframes/1_All_formats/4_sample_info_example_parquet.parquet')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Example Xlsx
```{python}
#| label: 'Example Xlsx 5'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/2_Dataframes/1_All_formats/5_example_xlsx.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

# Networks
## Interactive Networks
Optional description for subsection.


### Man Example
**Number of nodes:** 9

**Number of edges:** 14


<div style="text-align: center;">
<iframe src="static/Man_Example.html" alt="Man Example plot" width="800px" height="630px"></iframe>
</div>

## Static Networks
### Phyla Correlation Network
![](../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/3_Networks/2_Static_networks/1_phyla_correlation_network.png){fig-alt= width=90%}

# Html
## All Html
### Plot

<div style="text-align: center;">
<iframe src="../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/4_Html/1_All_html/1_plot.html" alt="Plot"
        width="950px" height="530px"></iframe>
</div>

### Ckg Network
**Number of nodes:** 33

**Number of edges:** 35


<div style="text-align: center;">
<iframe src="../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/4_Html/1_All_html/2_ckg_network.html" alt="Ckg Network plot" width="800px" height="630px"></iframe>
</div>

### Multiqc Report

<div style="text-align: center;">
<iframe src="../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/4_Html/1_All_html/3_multiqc_report.html" alt="Multiqc Report"
        width="950px" height="530px"></iframe>
</div>

# Markdown
## All Markdown
### Readme

```{python}
#| label: 'Readme 3'
#| fig-cap: ""


with open(report_dir / '../../../../../docs/example_data/Basic_example_vuegen_demo_notebook/5_Markdown/1_All_markdown/README.md', 'r') as markdown_file:
    markdown_content = markdown_file.read()

display.Markdown(markdown_content)
```
